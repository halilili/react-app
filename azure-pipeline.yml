# Azure DevOps pipeline YAML file for building and deploying a Docker image to a Kubernetes cluster on-premises

# Define the pipeline
trigger:
- none
  #branches:
    #nclude:
      #- main
  #paths:
    #include:
      #- Dockerfile
      #- app/**/*

pool:
  vmImage: 'ubuntu-20.04'

# Below are the variables needed in this pipeline
variables:
  imageName: 'react-app'
  imageTag: '$(Build.BuildId)'
  imageFullName: '$(imageName):$(imageTag)'
  dockerfile: '**/Dockerfile'
  k8sClusterName: 'minikube'
  k8sNameSpace: 'dev-deployments'
  dockerhubNS: 'hassanali70826'
  deploymentFile: '**/k8s/deployment.yaml'
  docker-hub-conn: 'docker-hub-connection'


stages:
  - stage: Build
    displayName: Build and Push Docker Image
    jobs:
      - job: Build
        displayName: Build and Push
        steps:
        
          - task: Docker@2
            name: 'DockerLogIn'
            displayName: 'Logging In to Docker'
            inputs:
              containerRegistry: $(docker-hub-conn)
              command: 'login'

          - task: Docker@2
            displayName: Build and Push Image
            inputs:
              command: buildAndPush
              containerRegistry: $(docker-hub-conn)
              repository: $(dockerhubNS)/$(imageName)
              dockerfile: $(dockerfile) #$(Build.SourcesDirectory)/
              tags: |
                $(imageTag)
              #buildContext: '$(Build.SourcesDirectory)'
          
      - job: Dispaly
        displayName: 'Command Line Script to write out some vars' 
        steps:
        - script: |
            echo build.artifactstagingdirectory and build.BuildId are as follows.
            echo $(build.artifactstagingdirectory) $(build.BuildId)
            echo Pipeline.Workspace is $(Pipeline.Workspace)
            echo The current branch is - $(Build.SourceBranchName)!!.
            echo $(finalBuildArtifactName)
 

  - stage: Deploy
    displayName: Deploy to Kubernetes
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: Deploy
        displayName: Deploy to Kubernetes
        steps:
          - task: KubernetesManifest@0
            displayName: 'Deploy to a Dev environment onprime minikube'
            inputs:
              kubernetesServiceConnection: 'minikube-ubuntu-conn'
              action: 'deploy'
              namespace: $(k8sNameSpace)
              manifests: $(deploymentFile)
              containers: |
                $(dockerhubNS)/$(imageName):$(imageTag)
               
          - task: Kubernetes@1
            displayName: 'Deploy to production AWS EKS'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'eks-conn'
              namespace: $(k8sNameSpace)
              command: 'apply'
              useConfigurationFile: true
              configuration: $(System.ArtifactDirectory)/$(deploymentFile) #$(Pipeline.Workspace)/
              secretType: 'dockerRegistry'
              containerRegistryType: 'Container Registry'
              dockerRegistryEndpoint: $(docker-hub-conn)
              arguments: |
               --imageTag $(imageTag)
  
  
